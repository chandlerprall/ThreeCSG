"use strict";window.ThreeBSP=function(){var a,b=1e-5,c=0,d=1,e=2,f=3;return a=function(b){var c,d,e,f,g,h,i,j=[];if(b instanceof THREE.Geometry)this.matrix=new THREE.Matrix4;else{if(!(b instanceof THREE.Mesh)){if(b instanceof a.Node)return this.tree=b,this.matrix=new THREE.Matrix4,this;throw"ThreeBSP: Given geometry is unsupported"}b.updateMatrix(),this.matrix=b.matrix.clone(),b=b.geometry}for(c=0,d=b.faces.length;d>c;c++)e=b.faces[c],g=b.faceVertexUvs[0][c],i=new a.Polygon,e instanceof THREE.Face3?(f=b.vertices[e.a],h=g?new THREE.Vector2(g[0].x,g[0].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[0],h),f.applyMatrix4(this.matrix),i.vertices.push(f),f=b.vertices[e.b],h=g?new THREE.Vector2(g[1].x,g[1].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[2],h),f.applyMatrix4(this.matrix),i.vertices.push(f),f=b.vertices[e.c],h=g?new THREE.Vector2(g[2].x,g[2].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[2],h),f.applyMatrix4(this.matrix),i.vertices.push(f)):(f=b.vertices[e.a],h=g?new THREE.Vector2(g[0].x,g[0].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[0],h),f.applyMatrix4(this.matrix),i.vertices.push(f),f=b.vertices[e.b],h=g?new THREE.Vector2(g[1].x,g[1].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[1],h),f.applyMatrix4(this.matrix),i.vertices.push(f),f=b.vertices[e.c],h=g?new THREE.Vector2(g[2].x,g[2].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[2],h),f.applyMatrix4(this.matrix),i.vertices.push(f),f=b.vertices[e.d],h=g?new THREE.Vector2(g[3].x,g[3].y):null,f=new a.Vertex(f.x,f.y,f.z,e.vertexNormals[3],h),f.applyMatrix4(this.matrix),i.vertices.push(f)),i.calculateProperties(),j.push(i);this.tree=new a.Node(j)},a.prototype.subtract=function(b){var c=this.tree.clone(),d=b.tree.clone();return c.invert(),c.clipTo(d),d.clipTo(c),d.invert(),d.clipTo(c),d.invert(),c.build(d.allPolygons()),c.invert(),c=new a(c),c.matrix=this.matrix,c},a.prototype.union=function(b){var c=this.tree.clone(),d=b.tree.clone();return c.clipTo(d),d.clipTo(c),d.invert(),d.clipTo(c),d.invert(),c.build(d.allPolygons()),c=new a(c),c.matrix=this.matrix,c},a.prototype.intersect=function(b){var c=this.tree.clone(),d=b.tree.clone();return c.invert(),d.clipTo(c),d.invert(),c.clipTo(d),d.clipTo(c),c.build(d.allPolygons()),c.invert(),c=new a(c),c.matrix=this.matrix,c},a.prototype.toGeometry=function(){var a,b,c,d,e,f,g,h,i,j,k=(new THREE.Matrix4).getInverse(this.matrix),l=new THREE.Geometry,m=this.tree.allPolygons(),n=m.length,o={};for(a=0;n>a;a++)for(c=m[a],d=c.vertices.length,b=2;d>b;b++)j=[],h=c.vertices[0],j.push(new THREE.Vector2(h.uv.x,h.uv.y)),h=new THREE.Vector3(h.x,h.y,h.z),h.applyMatrix4(k),"undefined"!=typeof o[h.x+","+h.y+","+h.z]?e=o[h.x+","+h.y+","+h.z]:(l.vertices.push(h),e=o[h.x+","+h.y+","+h.z]=l.vertices.length-1),h=c.vertices[b-1],j.push(new THREE.Vector2(h.uv.x,h.uv.y)),h=new THREE.Vector3(h.x,h.y,h.z),h.applyMatrix4(k),"undefined"!=typeof o[h.x+","+h.y+","+h.z]?f=o[h.x+","+h.y+","+h.z]:(l.vertices.push(h),f=o[h.x+","+h.y+","+h.z]=l.vertices.length-1),h=c.vertices[b],j.push(new THREE.Vector2(h.uv.x,h.uv.y)),h=new THREE.Vector3(h.x,h.y,h.z),h.applyMatrix4(k),"undefined"!=typeof o[h.x+","+h.y+","+h.z]?g=o[h.x+","+h.y+","+h.z]:(l.vertices.push(h),g=o[h.x+","+h.y+","+h.z]=l.vertices.length-1),i=new THREE.Face3(e,f,g,new THREE.Vector3(c.normal.x,c.normal.y,c.normal.z)),l.faces.push(i),l.faceVertexUvs[0].push(j);return l},a.prototype.toMesh=function(a){var b=this.toGeometry(),c=new THREE.Mesh(b,a);return c.position.setFromMatrixPosition(this.matrix),c.rotation.setFromRotationMatrix(this.matrix),c},a.Polygon=function(a){a instanceof Array||(a=[]),this.vertices=a,a.length>0?this.calculateProperties():this.normal=this.w=void 0},a.Polygon.prototype.calculateProperties=function(){var a=this.vertices[0],b=this.vertices[1],c=this.vertices[2];return this.normal=b.clone().subtract(a).cross(c.clone().subtract(a)).normalize(),this.w=this.normal.clone().dot(a),this},a.Polygon.prototype.clone=function(){var b,c,d=new a.Polygon;for(b=0,c=this.vertices.length;c>b;b++)d.vertices.push(this.vertices[b].clone());return d.calculateProperties(),d},a.Polygon.prototype.flip=function(){var a,b=[];for(this.normal.multiplyScalar(-1),this.w*=-1,a=this.vertices.length-1;a>=0;a--)b.push(this.vertices[a]);return this.vertices=b,this},a.Polygon.prototype.classifyVertex=function(a){var f=this.normal.dot(a)-this.w;return-b>f?e:f>b?d:c},a.Polygon.prototype.classifySide=function(a){var b,g,h,i=0,j=0,k=a.vertices.length;for(b=0;k>b;b++)g=a.vertices[b],h=this.classifyVertex(g),h===d?i++:h===e&&j++;return i>0&&0===j?d:0===i&&j>0?e:0===i&&0===j?c:f},a.Polygon.prototype.splitPolygon=function(b,g,h,i,j){var k=this.classifySide(b);if(k===c)(this.normal.dot(b.normal)>0?g:h).push(b);else if(k===d)i.push(b);else if(k===e)j.push(b);else{var l,m,n,o,p,q,r,s,t,u=[],v=[];for(m=0,l=b.vertices.length;l>m;m++)n=(m+1)%l,q=b.vertices[m],r=b.vertices[n],o=this.classifyVertex(q),p=this.classifyVertex(r),o!=e&&u.push(q),o!=d&&v.push(q),(o|p)===f&&(s=(this.w-this.normal.dot(q))/this.normal.dot(r.clone().subtract(q)),t=q.interpolate(r,s),u.push(t),v.push(t));u.length>=3&&i.push(new a.Polygon(u).calculateProperties()),v.length>=3&&j.push(new a.Polygon(v).calculateProperties())}},a.Vertex=function(a,b,c,d,e){this.x=a,this.y=b,this.z=c,this.normal=d||new THREE.Vector3,this.uv=e||new THREE.Vector2},a.Vertex.prototype.clone=function(){return new a.Vertex(this.x,this.y,this.z,this.normal.clone(),this.uv.clone())},a.Vertex.prototype.add=function(a){return this.x+=a.x,this.y+=a.y,this.z+=a.z,this},a.Vertex.prototype.subtract=function(a){return this.x-=a.x,this.y-=a.y,this.z-=a.z,this},a.Vertex.prototype.multiplyScalar=function(a){return this.x*=a,this.y*=a,this.z*=a,this},a.Vertex.prototype.cross=function(a){var b=this.x,c=this.y,d=this.z;return this.x=c*a.z-d*a.y,this.y=d*a.x-b*a.z,this.z=b*a.y-c*a.x,this},a.Vertex.prototype.normalize=function(){var a=Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z);return this.x/=a,this.y/=a,this.z/=a,this},a.Vertex.prototype.dot=function(a){return this.x*a.x+this.y*a.y+this.z*a.z},a.Vertex.prototype.lerp=function(a,b){return this.add(a.clone().subtract(this).multiplyScalar(b)),this.normal.add(a.normal.clone().sub(this.normal).multiplyScalar(b)),this.uv.add(a.uv.clone().sub(this.uv).multiplyScalar(b)),this},a.Vertex.prototype.interpolate=function(a,b){return this.clone().lerp(a,b)},a.Vertex.prototype.applyMatrix4=function(a){var b=this.x,c=this.y,d=this.z,e=a.elements;return this.x=e[0]*b+e[4]*c+e[8]*d+e[12],this.y=e[1]*b+e[5]*c+e[9]*d+e[13],this.z=e[2]*b+e[6]*c+e[10]*d+e[14],this},a.Node=function(b){var c,d,e=[],f=[];if(this.polygons=[],this.front=this.back=void 0,b instanceof Array&&0!==b.length){for(this.divider=b[0].clone(),c=0,d=b.length;d>c;c++)this.divider.splitPolygon(b[c],this.polygons,this.polygons,e,f);e.length>0&&(this.front=new a.Node(e)),f.length>0&&(this.back=new a.Node(f))}},a.Node.isConvex=function(a){var b,c;for(b=0;b<a.length;b++)for(c=0;c<a.length;c++)if(b!==c&&a[b].classifySide(a[c])!==e)return!1;return!0},a.Node.prototype.build=function(b){var c,d,e=[],f=[];for(this.divider||(this.divider=b[0].clone()),c=0,d=b.length;d>c;c++)this.divider.splitPolygon(b[c],this.polygons,this.polygons,e,f);e.length>0&&(this.front||(this.front=new a.Node),this.front.build(e)),f.length>0&&(this.back||(this.back=new a.Node),this.back.build(f))},a.Node.prototype.allPolygons=function(){var a=this.polygons.slice();return this.front&&(a=a.concat(this.front.allPolygons())),this.back&&(a=a.concat(this.back.allPolygons())),a},a.Node.prototype.clone=function(){var b=new a.Node;return b.divider=this.divider.clone(),b.polygons=this.polygons.map(function(a){return a.clone()}),b.front=this.front&&this.front.clone(),b.back=this.back&&this.back.clone(),b},a.Node.prototype.invert=function(){var a,b,c;for(a=0,b=this.polygons.length;b>a;a++)this.polygons[a].flip();return this.divider.flip(),this.front&&this.front.invert(),this.back&&this.back.invert(),c=this.front,this.front=this.back,this.back=c,this},a.Node.prototype.clipPolygons=function(a){var b,c,d,e;if(!this.divider)return a.slice();for(d=[],e=[],b=0,c=a.length;c>b;b++)this.divider.splitPolygon(a[b],d,e,d,e);return this.front&&(d=this.front.clipPolygons(d)),e=this.back?this.back.clipPolygons(e):[],d.concat(e)},a.Node.prototype.clipTo=function(a){this.polygons=a.clipPolygons(this.polygons),this.front&&this.front.clipTo(a),this.back&&this.back.clipTo(a)},a}();